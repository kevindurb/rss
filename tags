!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$setOnInsert	gateways/items.js	/^          { $set: restItem, $setOnInsert: { publishedDate } },$/;"	o
.list-group-item img 	client/styles.css	/^.list-group-item img {$/;"	c
Api	client/services/api.js	/^class Api {$/;"	c
App	client/App.js	/^class App {$/;"	c
App	client/components/App.js	/^class App extends Element {$/;"	c
Button	client/components/ManageFeedsModal.js	/^    const deleteButton = makeButton({$/;"	c
Button	client/components/NavBar.js	/^    const refreshButton = makeButton({$/;"	c
Button	client/elements/Button.js	/^export const makeButton = (props) => {$/;"	c
Container	client/Container.js	/^class Container {$/;"	c
Container	client/elements/Container.js	/^export const makeContainer = () => {$/;"	c
Content	client/components/ItemList.js	/^    small.textContent = formatDate(item.publishedDate);$/;"	c
Date	client/utils/date.js	/^export const formatDate = (input) => {$/;"	c
Element	client/utils/Element.js	/^class Element extends HTMLElement {$/;"	c
EventEmitter	client/EventEmitter.js	/^class EventEmitter {$/;"	c
FEEDS_REFRESHED	client/constants/events.js	/^export const FEEDS_REFRESHED = 'FEEDS_REFRESHED';$/;"	n
FEED_ADDED	client/constants/events.js	/^export const FEED_ADDED = 'FEED_ADDED';$/;"	n
FeedsButton	client/components/ManageFeedsModal.js	/^    const manageFeedsButton = makeButton({$/;"	c
FeedsHandler	scripts/refreshFeeds.js	/^const refreshFeedsHandler = require('..\/handlers\/refreshFeeds');$/;"	c
FeedsService	client/services/Feeds.js	/^class FeedsService {$/;"	c
Finder	handlers/refreshFeeds.js	/^const rssFinder = require('rss-finder');$/;"	c
Gateway	handlers/createFeed.js	/^const feedsGateway = require('..\/gateways\/feeds');$/;"	c
Gateway	handlers/deleteFeed.js	/^const feedsGateway = require('..\/gateways\/feeds');$/;"	c
Gateway	handlers/getFeeds.js	/^const feedsGateway = require('..\/gateways\/feeds');$/;"	c
Gateway	handlers/getItems.js	/^const itemsGateway = require('..\/gateways\/items');$/;"	c
Gateway	handlers/refreshFeeds.js	/^const feedsGateway = require('..\/gateways\/feeds');$/;"	c
Gateway	handlers/refreshFeeds.js	/^const itemsGateway = require('..\/gateways\/items');$/;"	c
ItemList	client/components/ItemList.js	/^class ItemList extends Element {$/;"	c
ItemsService	client/services/items.js	/^class ItemsService {$/;"	c
ListGroup	client/elements/ListGroup.js	/^export const makeListGroup = () => {$/;"	c
ManageFeedsModal	client/components/ManageFeedsModal.js	/^class ManageFeedsModal extends Element {$/;"	c
Modal	client/elements/Modal.js	/^export const makeModal = (props) => {$/;"	c
ModalAndButton	client/elements/Modal.js	/^export const linkModalAndButton = (modal, button) => {$/;"	c
MongoClient	gateways/database.js	/^const MongoClient = require('mongodb').MongoClient;$/;"	c
NavBar	client/components/NavBar.js	/^class NavBar extends Element {$/;"	c
OfDay	client/utils/date.js	/^  const startOfDay = getStartOfDay();$/;"	c
OnInsert	gateways/items.js	/^          { $set: restItem, $setOnInsert: { publishedDate } },$/;"	c
Props	client/elements/Button.js	/^const defaultProps = {$/;"	c
Props	client/elements/Modal.js	/^const defaultProps = {$/;"	c
Router	router.js	/^const Router = require('express').Router;$/;"	c
RssParser	handlers/refreshFeeds.js	/^const RssParser = require('rss-parser');$/;"	c
StartOfDay	client/utils/date.js	/^export const getStartOfDay = () => {$/;"	c
add	client/Container.js	/^  add(identifier, factory) {$/;"	f
addEventListener	client/EventEmitter.js	/^  addEventListener(event, callback) {$/;"	f
addFeed	client/components/ManageFeedsModal.js	/^  async addFeed() {$/;"	f
addFeed	client/services/Feeds.js	/^  async addFeed(url) {$/;"	f
body	client/services/Feeds.js	/^      body: {$/;"	o
boot	client/App.js	/^  boot() {$/;"	f
catch	client/services/api.js	/^    } catch (e) {$/;"	f
catch	gateways/items.js	/^      } catch (e) {$/;"	f
catch	promisify.js	/^  } catch (e) {$/;"	f
connectedCallback	client/utils/Element.js	/^  connectedCallback() {$/;"	f
constructor	client/App.js	/^  constructor() {$/;"	f
constructor	client/Container.js	/^  constructor() {$/;"	f
constructor	client/EventEmitter.js	/^  constructor() {$/;"	f
constructor	client/utils/Element.js	/^  constructor() {$/;"	f
createFeed	gateways/feeds.js	/^  async createFeed(feedData) {$/;"	f
delete	client/services/api.js	/^  delete(url, request = {}) {$/;"	f
deleteFeed	client/components/ManageFeedsModal.js	/^  deleteFeed(id) {$/;"	f
deleteFeed	client/services/Feeds.js	/^  deleteFeed(id) {$/;"	f
deleteFeed	gateways/feeds.js	/^  async deleteFeed(id) {$/;"	f
emit	client/EventEmitter.js	/^  emit(event, ...args) {$/;"	f
executeRequest	client/services/api.js	/^  executeRequest(method, url, request = {}) {$/;"	f
exports	gateways/database.js	/^module.exports = {$/;"	o
exports	gateways/feeds.js	/^module.exports = {$/;"	o
exports	gateways/items.js	/^module.exports = {$/;"	o
factories	client/Container.js	/^    this.factories = {};$/;"	o
for	gateways/items.js	/^    for (let item of items) {$/;"	f
get	client/Container.js	/^  get(identifier) {$/;"	f
get	client/services/api.js	/^  get(url, request = {}) {$/;"	f
getAllFeeds	client/services/Feeds.js	/^  getAllFeeds() {$/;"	f
getAllItems	client/services/items.js	/^  getAllItems() {$/;"	f
getConnection	gateways/database.js	/^  async getConnection() {$/;"	f
getFeeds	gateways/feeds.js	/^  async getFeeds() {$/;"	f
getItems	gateways/items.js	/^  async getItems() {$/;"	f
headers	client/services/api.js	/^      headers: {$/;"	o
if	client/Container.js	/^      if (!this.factories[identifier]) {$/;"	f
if	client/Container.js	/^    if (!this.instances[identifier]) {$/;"	f
if	client/EventEmitter.js	/^    if (!this.listeners[event]) {$/;"	f
if	client/EventEmitter.js	/^    if (this.listeners[event]) {$/;"	f
if	client/elements/Button.js	/^  if (primary) {$/;"	f
if	client/utils/Element.js	/^    if (this.isConnected) {$/;"	f
if	client/utils/createElement.js	/^  if (attributes.classList) {$/;"	f
if	client/utils/createElement.js	/^  if (attributes.data) {$/;"	f
if	client/utils/createElement.js	/^  if (attributes.id) {$/;"	f
if	client/utils/createElement.js	/^  if (attributes.textContent) {$/;"	f
if	client/utils/createElement.js	/^  if (typeof children === 'string') {$/;"	f
if	client/utils/createElement.js	/^  if (typeof tagOrClass === 'string') {$/;"	f
if	client/utils/date.js	/^  if (date > startOfDay) {$/;"	f
init	client/components/ItemList.js	/^  init(container) {$/;"	f
init	client/components/ManageFeedsModal.js	/^  init(container) {$/;"	f
init	client/components/NavBar.js	/^  init(container) {$/;"	f
init	client/utils/Element.js	/^  init() {}$/;"	f
insertItems	gateways/items.js	/^  async insertItems(items) {$/;"	f
instances	client/Container.js	/^    this.instances = {};$/;"	o
json	client/services/api.js	/^  async json(request) {$/;"	f
listenTo	client/utils/Element.js	/^  listenTo(event, element, callback) {$/;"	f
listeners	client/EventEmitter.js	/^    this.listeners = {};$/;"	o
loadFeeds	client/components/ManageFeedsModal.js	/^  loadFeeds() {$/;"	f
loadItems	client/components/ItemList.js	/^  async loadItems() {$/;"	f
mount	client/components/App.js	/^  mount() {$/;"	f
mount	client/components/ItemList.js	/^  mount() {$/;"	f
mount	client/components/ManageFeedsModal.js	/^  mount() {$/;"	f
mount	client/components/NavBar.js	/^  mount() {$/;"	f
mount	client/utils/Element.js	/^  mount() {}$/;"	f
post	client/services/api.js	/^  post(url, request = {}) {$/;"	f
refreshFeeds	client/components/NavBar.js	/^  async refreshFeeds() {$/;"	f
refreshFeeds	client/services/Feeds.js	/^  async refreshFeeds() {$/;"	f
renderAddFeed	client/components/ManageFeedsModal.js	/^  renderAddFeed() {$/;"	f
renderFeed	client/components/ManageFeedsModal.js	/^  renderFeed(feed) {$/;"	f
renderFeeds	client/components/ManageFeedsModal.js	/^  renderFeeds(feeds) {$/;"	f
renderItem	client/components/ItemList.js	/^  renderItem(item) {$/;"	f
renderItems	client/components/ItemList.js	/^  renderItems() {$/;"	f
setup	gateways/database.js	/^  async setup(db) {$/;"	f
